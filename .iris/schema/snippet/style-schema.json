{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://volmit.com/iris-schema/irisgeneratorstyle.json",
    "anyOf": [
        {
            "description": "A gen style",
            "type": "object",
            "properties": {
                "style": {
                    "type": "string",
                    "$ref": "#/definitions/oneof-enum-com-volmit-iris-engine-object-noisestyle",
                    "description": "style\nThe chance is 1 in CHANCE per interval\n   \nNoiseStyle\nStyles of noise\n    \n* Default Value is a default object (create this object to see default properties)\nMust be a valid NoiseStyle (use ctrl+space for auto complete!)"
                },
                "cellularFrequency": {
                    "type": "number",
                    "description": "cellularFrequency\nIf set above 0, this style will be cellularized\n   \nNumber\n\n    \n* Default Value is 0.0"
                },
                "cellularZoom": {
                    "type": "number",
                    "description": "cellularZoom\nCell zooms\n   \nNumber\n\n    \n* Default Value is 1.0"
                },
                "zoom": {
                    "type": "number",
                    "minimum": 1.0E-5,
                    "description": "zoom\nThe zoom of this style\n   \nNumber\n\n    \n* Default Value is 1.0\n* Minimum allowed is 1.0E-5"
                },
                "expression": {
                    "type": "string",
                    "$ref": "#/definitions/erzexpressions",
                    "description": "expression\nInstead of using the style property, use a custom expression to represent this style.\n   \nIris Expression\n\nMust be a valid expressions (use ctrl+space for auto complete!)"
                },
                "imageMap": {
                    "anyOf": [
                        {
                            "!required": false,
                            "type": "object",
                            "$ref": "#/definitions/obj-com-volmit-iris-engine-object-irisimagemap",
                            "description": "imageMap\nUse an Image map instead of a generated value\n   \nImageMap (Object)\nRepresents an image map\n    \nYou can instead specify \"snippet/carving/some-name.json\" to use a snippet file instead of specifying it here."
                        },
                        {
                            "type": "string",
                            "$ref": "#/definitions/enum-snippet-carving",
                            "description": "imageMap\nUse an Image map instead of a generated value\n   \nImageMap (Object)\nRepresents an image map\n    \nYou can instead specify \"snippet/carving/some-name.json\" to use a snippet file instead of specifying it here."
                        }
                    ],
                    "description": "imageMap\nUse an Image map instead of a generated value\n   \nImageMap (Object)\nRepresents an image map\n    \nYou can instead specify \"snippet/carving/some-name.json\" to use a snippet file instead of specifying it here."
                },
                "multiplier": {
                    "type": "number",
                    "minimum": 1.0E-5,
                    "description": "multiplier\nThe Output multiplier. Only used if parent is fracture.\n   \nNumber\n\n    \n* Default Value is 1.0\n* Minimum allowed is 1.0E-5"
                },
                "axialFracturing": {
                    "type": "boolean",
                    "description": "axialFracturing\nIf set to true, each dimension will be fractured with a different order of input coordinates. This is usually 2 or 3 times slower than normal.\n   \nBoolean\n\n    \n* Default Value is a default object (create this object to see default properties)"
                },
                "fracture": {
                    "anyOf": [
                        {
                            "!required": false,
                            "type": "object",
                            "$ref": "#/definitions/obj-com-volmit-iris-engine-object-irisgeneratorstyle",
                            "description": "fracture\nApply a generator to the coordinate field fed into this parent generator. I.e. Distort your generator with another generator.\n   \nGeneratorStyle (Object)\nA gen style\n    \nYou can instead specify \"snippet/style/some-name.json\" to use a snippet file instead of specifying it here."
                        },
                        {
                            "type": "string",
                            "$ref": "#/definitions/enum-snippet-style",
                            "description": "fracture\nApply a generator to the coordinate field fed into this parent generator. I.e. Distort your generator with another generator.\n   \nGeneratorStyle (Object)\nA gen style\n    \nYou can instead specify \"snippet/style/some-name.json\" to use a snippet file instead of specifying it here."
                        }
                    ],
                    "description": "fracture\nApply a generator to the coordinate field fed into this parent generator. I.e. Distort your generator with another generator.\n   \nGeneratorStyle (Object)\nA gen style\n    \nYou can instead specify \"snippet/style/some-name.json\" to use a snippet file instead of specifying it here."
                },
                "exponent": {
                    "type": "number",
                    "minimum": 0.01562,
                    "maximum": 64,
                    "description": "exponent\nThe exponent\n   \nNumber\n\n    \n* Default Value is 1.0\n* Minimum allowed is 0.01562\n* Maximum allowed is 64.0"
                },
                "cacheSize": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 8192,
                    "description": "cacheSize\nIf the cache size is set above 0, this generator will be cached\n   \nInteger\n\n    \n* Default Value is 0\n* Minimum allowed is 0\n* Maximum allowed is 8192"
                }
            }
        },
        {"type": "string"}
    ],
    "definitions": {
        "oneof-enum-com-volmit-iris-engine-object-noisestyle": {"oneOf": [
            {
                "const": "STATIC",
                "description": "White Noise is like static. Useful for block scattering but not terrain."
            },
            {
                "const": "STATIC_BILINEAR",
                "description": "White Noise is like static. Useful for block scattering but not terrain."
            },
            {
                "const": "STATIC_BICUBIC",
                "description": "White Noise is like static. Useful for block scattering but not terrain."
            },
            {
                "const": "STATIC_HERMITE",
                "description": "White Noise is like static. Useful for block scattering but not terrain."
            },
            {
                "const": "IRIS",
                "description": "Wispy Perlin-looking simplex noise. The 'iris' style noise."
            },
            {
                "const": "CLOVER",
                "description": "Clover Noise"
            },
            {
                "const": "CLOVER_STARCAST_3",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_STARCAST_6",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_STARCAST_9",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_STARCAST_12",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_BILINEAR_STARCAST_3",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_BILINEAR_STARCAST_6",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_BILINEAR_STARCAST_9",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_BILINEAR_STARCAST_12",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_HERMITE_STARCAST_3",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_HERMITE_STARCAST_6",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_HERMITE_STARCAST_9",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_HERMITE_STARCAST_12",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_BILINEAR",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_BICUBIC",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CLOVER_HERMITE",
                "description": "CLOVER noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "VASCULAR",
                "description": "Vascular noise gets higher as the position nears a cell border."
            },
            {
                "const": "FLAT",
                "description": "It always returns 0.5"
            },
            {
                "const": "CELLULAR",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_STARCAST_3",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_STARCAST_6",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_STARCAST_9",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_STARCAST_12",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_BILINEAR_STARCAST_3",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_BILINEAR_STARCAST_6",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_BILINEAR_STARCAST_9",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_BILINEAR_STARCAST_12",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_HERMITE_STARCAST_3",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_HERMITE_STARCAST_6",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_HERMITE_STARCAST_9",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_HERMITE_STARCAST_12",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_BILINEAR",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_BICUBIC",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "CELLULAR_HERMITE",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders."
            },
            {
                "const": "NOWHERE",
                "description": "Classic German Engineering"
            },
            {
                "const": "NOWHERE_CELLULAR",
                "description": "Classic German Engineering"
            },
            {
                "const": "NOWHERE_CLOVER",
                "description": "Classic German Engineering"
            },
            {
                "const": "NOWHERE_SIMPLEX",
                "description": "Classic German Engineering"
            },
            {
                "const": "NOWHERE_GLOB",
                "description": "Classic German Engineering"
            },
            {
                "const": "NOWHERE_VASCULAR",
                "description": "Classic German Engineering"
            },
            {
                "const": "NOWHERE_CUBIC",
                "description": "Classic German Engineering"
            },
            {
                "const": "NOWHERE_SUPERFRACTAL",
                "description": "Classic German Engineering"
            },
            {
                "const": "NOWHERE_FRACTAL",
                "description": "Classic German Engineering"
            },
            {
                "const": "IRIS_DOUBLE",
                "description": "Wispy Perlin-looking simplex noise. The 'iris' style noise."
            },
            {
                "const": "IRIS_THICK",
                "description": "Wispy Perlin-looking simplex noise. The 'iris' style noise."
            },
            {
                "const": "IRIS_HALF",
                "description": "Wispy Perlin-looking simplex noise. The 'iris' style noise."
            },
            {
                "const": "SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise."
            },
            {
                "const": "FRACTAL_SMOKE",
                "description": "Very Detailed smoke using simplex fractured with fractal billow simplex at high octaves."
            },
            {
                "const": "VASCULAR_THIN",
                "description": "Thinner Veins."
            },
            {
                "const": "SIMPLEX_CELLS",
                "description": "Cells of simplex noise"
            },
            {
                "const": "SIMPLEX_VASCULAR",
                "description": "Veins of simplex noise"
            },
            {
                "const": "FRACTAL_WATER",
                "description": "Very Detailed fluid using simplex fractured with fractal billow simplex at high octaves."
            },
            {
                "const": "PERLIN",
                "description": "Perlin. Like simplex but more natural"
            },
            {
                "const": "PERLIN_IRIS",
                "description": "Perlin. Like simplex but more natural"
            },
            {
                "const": "PERLIN_IRIS_HALF",
                "description": "Perlin. Like simplex but more natural"
            },
            {
                "const": "PERLIN_IRIS_DOUBLE",
                "description": "Perlin. Like simplex but more natural"
            },
            {
                "const": "PERLIN_IRIS_THICK",
                "description": "Perlin. Like simplex but more natural"
            },
            {
                "const": "FRACTAL_BILLOW_PERLIN",
                "description": "Billow Fractal Perlin Noise."
            },
            {
                "const": "BIOCTAVE_FRACTAL_BILLOW_PERLIN",
                "description": "Billow Fractal Perlin Noise. 2 Octaves"
            },
            {
                "const": "FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. Single octave."
            },
            {
                "const": "FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. Single octave."
            },
            {
                "const": "FRACTAL_BILLOW_IRIS",
                "description": "Billow Fractal Iris Noise. Single octave."
            },
            {
                "const": "FRACTAL_FBM_IRIS",
                "description": "FBM Fractal Iris Noise. Single octave."
            },
            {
                "const": "FRACTAL_BILLOW_IRIS_HALF",
                "description": "Billow Fractal Iris Noise. Single octave."
            },
            {
                "const": "FRACTAL_FBM_IRIS_HALF",
                "description": "FBM Fractal Iris Noise. Single octave."
            },
            {
                "const": "FRACTAL_BILLOW_IRIS_THICK",
                "description": "Billow Fractal Iris Noise. Single octave."
            },
            {
                "const": "FRACTAL_FBM_IRIS_THICK",
                "description": "FBM Fractal Iris Noise. Single octave."
            },
            {
                "const": "FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. Single octave."
            },
            {
                "const": "BIOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 2 octaves."
            },
            {
                "const": "BIOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 2 octaves."
            },
            {
                "const": "BIOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 2 octaves."
            },
            {
                "const": "TRIOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 3 octaves."
            },
            {
                "const": "TRIOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 3 octaves."
            },
            {
                "const": "TRIOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 3 octaves."
            },
            {
                "const": "QUADOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 4 octaves."
            },
            {
                "const": "QUADOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 4 octaves."
            },
            {
                "const": "QUADOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 4 octaves."
            },
            {
                "const": "QUINTOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 5 octaves."
            },
            {
                "const": "QUINTOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 5 octaves."
            },
            {
                "const": "QUINTOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 5 octaves."
            },
            {
                "const": "SEXOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 6 octaves."
            },
            {
                "const": "SEXOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 6 octaves."
            },
            {
                "const": "SEXOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 6 octaves."
            },
            {
                "const": "SEPTOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 7 octaves."
            },
            {
                "const": "SEPTOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 7 octaves."
            },
            {
                "const": "SEPTOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 7 octaves."
            },
            {
                "const": "OCTOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 8 octaves."
            },
            {
                "const": "OCTOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 8 octaves."
            },
            {
                "const": "OCTOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 8 octaves."
            },
            {
                "const": "NONOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 9 octaves."
            },
            {
                "const": "NONOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 9 octaves."
            },
            {
                "const": "NONOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 9 octaves."
            },
            {
                "const": "VIGOCTAVE_FRACTAL_RM_SIMPLEX",
                "description": "Rigid Multi Fractal Simplex Noise. 10 octaves."
            },
            {
                "const": "VIGOCTAVE_FRACTAL_BILLOW_SIMPLEX",
                "description": "Billow Fractal Simplex Noise. 10 octaves."
            },
            {
                "const": "VIGOCTAVE_FRACTAL_FBM_SIMPLEX",
                "description": "FBM Fractal Simplex Noise. 10 octaves."
            },
            {
                "const": "BIOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 2 octaves"
            },
            {
                "const": "TRIOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 3 octaves"
            },
            {
                "const": "QUADOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 4 octaves"
            },
            {
                "const": "QUINTOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 5 octaves"
            },
            {
                "const": "SEXOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 6 octaves"
            },
            {
                "const": "SEPTOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 7 octaves"
            },
            {
                "const": "OCTOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 8 octaves"
            },
            {
                "const": "NONOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 9 octaves"
            },
            {
                "const": "VIGOCTAVE_SIMPLEX",
                "description": "Basic, Smooth & Fast Simplex noise. Uses 10 octaves"
            },
            {
                "const": "GLOB",
                "description": "Glob noise is like cellular, but with globs..."
            },
            {
                "const": "GLOB_IRIS",
                "description": "Glob noise is like cellular, but with globs..."
            },
            {
                "const": "GLOB_IRIS_HALF",
                "description": "Glob noise is like cellular, but with globs..."
            },
            {
                "const": "GLOB_IRIS_DOUBLE",
                "description": "Glob noise is like cellular, but with globs..."
            },
            {
                "const": "GLOB_IRIS_THICK",
                "description": "Glob noise is like cellular, but with globs..."
            },
            {
                "const": "CUBIC",
                "description": "Cubic Noise"
            },
            {
                "const": "FRACTAL_CUBIC",
                "description": "Fractal Cubic Noise"
            },
            {
                "const": "FRACTAL_CUBIC_IRIS",
                "description": "Fractal Cubic Noise With Iris Swirls"
            },
            {
                "const": "FRACTAL_CUBIC_IRIS_THICK",
                "description": "Fractal Cubic Noise With Iris Swirls"
            },
            {
                "const": "FRACTAL_CUBIC_IRIS_HALF",
                "description": "Fractal Cubic Noise With Iris Swirls"
            },
            {
                "const": "FRACTAL_CUBIC_IRIS_DOUBLE",
                "description": "Fractal Cubic Noise With Iris Swirls"
            },
            {
                "const": "BIOCTAVE_FRACTAL_CUBIC",
                "description": "Fractal Cubic Noise, 2 Octaves"
            },
            {
                "const": "TRIOCTAVE_FRACTAL_CUBIC",
                "description": "Fractal Cubic Noise, 3 Octaves"
            },
            {
                "const": "QUADOCTAVE_FRACTAL_CUBIC",
                "description": "Fractal Cubic Noise, 4 Octaves"
            },
            {
                "const": "CUBIC_IRIS",
                "description": "Cubic Noise"
            },
            {
                "const": "CUBIC_IRIS_HALF",
                "description": "Cubic Noise"
            },
            {
                "const": "CUBIC_IRIS_DOUBLE",
                "description": "Cubic Noise"
            },
            {
                "const": "CUBIC_IRIS_THICK",
                "description": "Cubic Noise"
            },
            {
                "const": "CELLULAR_IRIS",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders. Cells are distorted using Iris styled wispy noise."
            },
            {
                "const": "CELLULAR_IRIS_THICK",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders. Cells are distorted using Iris styled wispy noise."
            },
            {
                "const": "CELLULAR_IRIS_DOUBLE",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders. Cells are distorted using Iris styled wispy noise."
            },
            {
                "const": "CELLULAR_IRIS_HALF",
                "description": "Cellular noise creates the same noise level for cells, changes noise level on cell borders. Cells are distorted using Iris styled wispy noise."
            },
            {
                "const": "CELLULAR_HEIGHT",
                "description": "Inverse of vascular, height gets to 1.0 as it approaches the center of a cell"
            },
            {
                "const": "CELLULAR_HEIGHT_IRIS",
                "description": "Inverse of vascular, height gets to 1.0 as it approaches the center of a cell, using the iris style."
            },
            {
                "const": "CELLULAR_HEIGHT_IRIS_DOUBLE",
                "description": "Inverse of vascular, height gets to 1.0 as it approaches the center of a cell, using the iris style."
            },
            {
                "const": "CELLULAR_HEIGHT_IRIS_THICK",
                "description": "Inverse of vascular, height gets to 1.0 as it approaches the center of a cell, using the iris style."
            },
            {
                "const": "CELLULAR_HEIGHT_IRIS_HALF",
                "description": "Inverse of vascular, height gets to 1.0 as it approaches the center of a cell, using the iris style."
            },
            {
                "const": "VASCULAR_IRIS",
                "description": "Vascular noise gets higher as the position nears a cell border. Cells are distorted using Iris styled wispy noise."
            },
            {
                "const": "VASCULAR_IRIS_DOUBLE",
                "description": "Vascular noise gets higher as the position nears a cell border. Cells are distorted using Iris styled wispy noise."
            },
            {
                "const": "VASCULAR_IRIS_THICK",
                "description": "Vascular noise gets higher as the position nears a cell border. Cells are distorted using Iris styled wispy noise."
            },
            {
                "const": "VASCULAR_IRIS_HALF",
                "description": "Vascular noise gets higher as the position nears a cell border. Cells are distorted using Iris styled wispy noise."
            }
        ]},
        "oneof-enum-com-volmit-iris-util-interpolation-interpolationmethod": {"oneOf": [
            {
                "const": "NONE",
                "description": "No interpolation. Nearest Neighbor (bad for terrain, great for performance)."
            },
            {
                "const": "BILINEAR",
                "description": "Uses 4 nearby points in a square to calculate a 2d slope. Very fast but creates square artifacts. See: https://en.wikipedia.org/wiki/Bilinear_interpolation"
            },
            {
                "const": "STARCAST_3",
                "description": "Starcast is Iris's own creation. It uses raytrace checks to find a horizontal boundary nearby. 3 Checks in a circle. Typically starcast is used with another interpolation method. See BILINEAR_STARCAST_9 For example. Starcast is meant to 'break up' large, abrupt cliffs to make cheap interpolation smoother."
            },
            {
                "const": "STARCAST_6",
                "description": "Starcast is Iris's own creation. It uses raytrace checks to find a horizontal boundary nearby. 6 Checks in a circle. Typically starcast is used with another interpolation method. See BILINEAR_STARCAST_9 For example. Starcast is meant to 'break up' large, abrupt cliffs to make cheap interpolation smoother."
            },
            {
                "const": "STARCAST_9",
                "description": "Starcast is Iris's own creation. It uses raytrace checks to find a horizontal boundary nearby. 9 Checks in a circle. Typically starcast is used with another interpolation method. See BILINEAR_STARCAST_9 For example. Starcast is meant to 'break up' large, abrupt cliffs to make cheap interpolation smoother."
            },
            {
                "const": "STARCAST_12",
                "description": "Starcast is Iris's own creation. It uses raytrace checks to find a horizontal boundary nearby. 12 Checks in a circle. Typically starcast is used with another interpolation method. See BILINEAR_STARCAST_9 For example. Starcast is meant to 'break up' large, abrupt cliffs to make cheap interpolation smoother."
            },
            {
                "const": "BILINEAR_STARCAST_3",
                "description": "Uses starcast to break up the abrupt sharp cliffs, then smooths the rest out with bilinear."
            },
            {
                "const": "BILINEAR_STARCAST_6",
                "description": "Uses starcast to break up the abrupt sharp cliffs, then smooths the rest out with bilinear."
            },
            {
                "const": "BILINEAR_STARCAST_9",
                "description": "Uses starcast to break up the abrupt sharp cliffs, then smooths the rest out with bilinear."
            },
            {
                "const": "BILINEAR_STARCAST_12",
                "description": "Uses starcast to break up the abrupt sharp cliffs, then smooths the rest out with bilinear."
            },
            {
                "const": "HERMITE_STARCAST_3",
                "description": "Uses starcast to break up the abrupt sharp cliffs, then smooths the rest out with hermite."
            },
            {
                "const": "HERMITE_STARCAST_6",
                "description": "Uses starcast to break up the abrupt sharp cliffs, then smooths the rest out with hermite."
            },
            {
                "const": "HERMITE_STARCAST_9",
                "description": "Uses starcast to break up the abrupt sharp cliffs, then smooths the rest out with hermite."
            },
            {
                "const": "HERMITE_STARCAST_12",
                "description": "Uses starcast to break up the abrupt sharp cliffs, then smooths the rest out with hermite."
            },
            {
                "const": "BILINEAR_BEZIER",
                "description": "Uses bilinear but on a bezier curve. See: https://en.wikipedia.org/wiki/Bezier_curve"
            },
            {
                "const": "BILINEAR_PARAMETRIC_2",
                "description": "Uses Bilinear but with parametric curves alpha 2."
            },
            {
                "const": "BILINEAR_PARAMETRIC_4",
                "description": "Uses Bilinear but with parametric curves alpha 4."
            },
            {
                "const": "BILINEAR_PARAMETRIC_1_5",
                "description": "Uses Bilinear but with parametric curves alpha 1.5."
            },
            {
                "const": "BICUBIC",
                "description": "Bicubic noise creates 4, 4-point splines for a total of 16 checks. Bcubic can go higher than expected and lower than expected right before a large change in slope."
            },
            {
                "const": "HERMITE",
                "description": "Hermite is similar to bicubic, but faster and it can be tuned a little bit"
            },
            {
                "const": "CATMULL_ROM_SPLINE",
                "description": "Essentially bicubic with zero tension"
            },
            {
                "const": "HERMITE_TENSE",
                "description": "Essentially bicubic with max tension"
            },
            {
                "const": "HERMITE_LOOSE",
                "description": "Hermite is similar to bicubic, this variant reduces the dimple artifacts of bicubic"
            },
            {
                "const": "HERMITE_LOOSE_HALF_POSITIVE_BIAS",
                "description": "Hermite is similar to bicubic, this variant reduces the dimple artifacts of bicubic"
            },
            {
                "const": "HERMITE_LOOSE_HALF_NEGATIVE_BIAS",
                "description": "Hermite is similar to bicubic, this variant reduces the dimple artifacts of bicubic"
            },
            {
                "const": "HERMITE_LOOSE_FULL_POSITIVE_BIAS",
                "description": "Hermite is similar to bicubic, this variant reduces the dimple artifacts of bicubic"
            },
            {
                "const": "HERMITE_LOOSE_FULL_NEGATIVE_BIAS",
                "description": "Hermite is similar to bicubic, this variant reduces the dimple artifacts of bicubic"
            }
        ]},
        "oneof-enum-com-volmit-iris-engine-object-irisimagechannel": {"oneOf": [
            {
                "const": "RED",
                "description": "The red channel of the image"
            },
            {
                "const": "GREEN",
                "description": "Thge green channel of the image"
            },
            {
                "const": "BLUE",
                "description": "The blue channel of the image"
            },
            {
                "const": "SATURATION",
                "description": "The saturation as a channel of the image"
            },
            {
                "const": "HUE",
                "description": "The hue as a channel of the image"
            },
            {
                "const": "BRIGHTNESS",
                "description": "The brightness as a channel of the image"
            },
            {
                "const": "COMPOSITE_ADD_RGB",
                "description": "The composite of RGB as a channel of the image. Takes the average channel value (adding)"
            },
            {
                "const": "COMPOSITE_MUL_RGB",
                "description": "The composite of RGB as a channel of the image. Multiplies the channels"
            },
            {
                "const": "COMPOSITE_MAX_RGB",
                "description": "The composite of RGB as a channel of the image. Picks the highest channel"
            },
            {
                "const": "COMPOSITE_ADD_HSB",
                "description": "The composite of HSB as a channel of the image Takes the average channel value (adding)"
            },
            {
                "const": "COMPOSITE_MUL_HSB",
                "description": "The composite of HSB as a channel of the image Multiplies the channels"
            },
            {
                "const": "COMPOSITE_MAX_HSB",
                "description": "The composite of HSB as a channel of the image Picks the highest channel"
            },
            {
                "const": "RAW",
                "description": "The raw value as a channel (probably doesnt look very good)"
            }
        ]},
        "obj-com-volmit-iris-engine-object-irisimagemap": {"anyOf": [
            {
                "description": "Represents an image map",
                "type": "object",
                "properties": {
                    "image": {
                        "type": "string",
                        "$ref": "#/definitions/erzimages",
                        "description": "image\nDefine the png image to read in this noise map\n   \nIris Image\n\n    \n* Default Value is \nMust be a valid images (use ctrl+space for auto complete!)"
                    },
                    "coordinateScale": {
                        "type": "number",
                        "minimum": 1,
                        "description": "coordinateScale\nThe amount of distance a single pixel is when reading this map, reading x=13, would still read pixel 0 if the scale is 32. You can zoom this externally through noise styles for zooming out.\n   \nNumber\n\n    \n* Default Value is 32.0\n* Minimum allowed is 1.0"
                    },
                    "interpolationMethod": {
                        "type": "string",
                        "$ref": "#/definitions/oneof-enum-com-volmit-iris-util-interpolation-interpolationmethod",
                        "description": "interpolationMethod\nThe interpolation method if the coordinateScale is greater than 1. This blends the image into noise. For nearest neighbor, use NONE.\n   \nInterpolationMethod\nAn interpolation method (or function) is simply a method of smoothing a position based on surrounding points on a grid. Bicubic for example is smoother, but has 4 times the checks than Bilinear for example. Try using BILINEAR_STARCAST_9 for beautiful results.\n    \n* Default Value is a default object (create this object to see default properties)\nMust be a valid InterpolationMethod (use ctrl+space for auto complete!)"
                    },
                    "channel": {
                        "type": "string",
                        "$ref": "#/definitions/oneof-enum-com-volmit-iris-engine-object-irisimagechannel",
                        "description": "channel\nThe channel of the image to read from. This basically converts image data into a number betwen 0 to 1 per pixel using a certain 'channel/filter'\n   \nImageChannel\nDetermines a derived channel of an image to read\n    \n* Default Value is a default object (create this object to see default properties)\nMust be a valid ImageChannel (use ctrl+space for auto complete!)"
                    },
                    "inverted": {
                        "type": "boolean",
                        "description": "inverted\nInvert the channel input\n   \nBoolean\n\n    \n* Default Value is a default object (create this object to see default properties)"
                    },
                    "tiled": {
                        "type": "boolean",
                        "description": "tiled\nTile the image coordinates\n   \nBoolean\n\n    \n* Default Value is a default object (create this object to see default properties)"
                    },
                    "centered": {
                        "type": "boolean",
                        "description": "centered\nCenter 0,0 to the center of the image instead of the top left.\n   \nBoolean\n\n    \n* Default Value is a default object (create this object to see default properties)"
                    }
                }
            },
            {"type": "string"}
        ]},
        "enum-snippet-carving": {"enum": []},
        "erzexpressions": {"enum": []},
        "enum-snippet-style": {"enum": []},
        "erzimages": {"enum": []},
        "obj-com-volmit-iris-engine-object-irisgeneratorstyle": {"anyOf": [
            {
                "description": "A gen style",
                "type": "object",
                "properties": {
                    "style": {
                        "type": "string",
                        "$ref": "#/definitions/oneof-enum-com-volmit-iris-engine-object-noisestyle",
                        "description": "style\nThe chance is 1 in CHANCE per interval\n   \nNoiseStyle\nStyles of noise\n    \n* Default Value is a default object (create this object to see default properties)\nMust be a valid NoiseStyle (use ctrl+space for auto complete!)"
                    },
                    "cellularFrequency": {
                        "type": "number",
                        "description": "cellularFrequency\nIf set above 0, this style will be cellularized\n   \nNumber\n\n    \n* Default Value is 0.0"
                    },
                    "cellularZoom": {
                        "type": "number",
                        "description": "cellularZoom\nCell zooms\n   \nNumber\n\n    \n* Default Value is 1.0"
                    },
                    "zoom": {
                        "type": "number",
                        "minimum": 1.0E-5,
                        "description": "zoom\nThe zoom of this style\n   \nNumber\n\n    \n* Default Value is 1.0\n* Minimum allowed is 1.0E-5"
                    },
                    "expression": {
                        "type": "string",
                        "$ref": "#/definitions/erzexpressions",
                        "description": "expression\nInstead of using the style property, use a custom expression to represent this style.\n   \nIris Expression\n\nMust be a valid expressions (use ctrl+space for auto complete!)"
                    },
                    "imageMap": {
                        "anyOf": [
                            {
                                "!required": false,
                                "type": "object",
                                "$ref": "#/definitions/obj-com-volmit-iris-engine-object-irisimagemap",
                                "description": "imageMap\nUse an Image map instead of a generated value\n   \nImageMap (Object)\nRepresents an image map\n    \nYou can instead specify \"snippet/carving/some-name.json\" to use a snippet file instead of specifying it here."
                            },
                            {
                                "type": "string",
                                "$ref": "#/definitions/enum-snippet-carving",
                                "description": "imageMap\nUse an Image map instead of a generated value\n   \nImageMap (Object)\nRepresents an image map\n    \nYou can instead specify \"snippet/carving/some-name.json\" to use a snippet file instead of specifying it here."
                            }
                        ],
                        "description": "imageMap\nUse an Image map instead of a generated value\n   \nImageMap (Object)\nRepresents an image map\n    \nYou can instead specify \"snippet/carving/some-name.json\" to use a snippet file instead of specifying it here."
                    },
                    "multiplier": {
                        "type": "number",
                        "minimum": 1.0E-5,
                        "description": "multiplier\nThe Output multiplier. Only used if parent is fracture.\n   \nNumber\n\n    \n* Default Value is 1.0\n* Minimum allowed is 1.0E-5"
                    },
                    "axialFracturing": {
                        "type": "boolean",
                        "description": "axialFracturing\nIf set to true, each dimension will be fractured with a different order of input coordinates. This is usually 2 or 3 times slower than normal.\n   \nBoolean\n\n    \n* Default Value is a default object (create this object to see default properties)"
                    },
                    "fracture": {
                        "anyOf": [
                            {
                                "!required": false,
                                "type": "object",
                                "$ref": "#/definitions/obj-com-volmit-iris-engine-object-irisgeneratorstyle",
                                "description": "fracture\nApply a generator to the coordinate field fed into this parent generator. I.e. Distort your generator with another generator.\n   \nGeneratorStyle (Object)\nA gen style\n    \nYou can instead specify \"snippet/style/some-name.json\" to use a snippet file instead of specifying it here."
                            },
                            {
                                "type": "string",
                                "$ref": "#/definitions/enum-snippet-style",
                                "description": "fracture\nApply a generator to the coordinate field fed into this parent generator. I.e. Distort your generator with another generator.\n   \nGeneratorStyle (Object)\nA gen style\n    \nYou can instead specify \"snippet/style/some-name.json\" to use a snippet file instead of specifying it here."
                            }
                        ],
                        "description": "fracture\nApply a generator to the coordinate field fed into this parent generator. I.e. Distort your generator with another generator.\n   \nGeneratorStyle (Object)\nA gen style\n    \nYou can instead specify \"snippet/style/some-name.json\" to use a snippet file instead of specifying it here."
                    },
                    "exponent": {
                        "type": "number",
                        "minimum": 0.01562,
                        "maximum": 64,
                        "description": "exponent\nThe exponent\n   \nNumber\n\n    \n* Default Value is 1.0\n* Minimum allowed is 0.01562\n* Maximum allowed is 64.0"
                    },
                    "cacheSize": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 8192,
                        "description": "cacheSize\nIf the cache size is set above 0, this generator will be cached\n   \nInteger\n\n    \n* Default Value is 0\n* Minimum allowed is 0\n* Maximum allowed is 8192"
                    }
                }
            },
            {"type": "string"}
        ]}
    }
}
